Zp
is(Zp$tree[1,1])
is(Zp$edge[1,1])
is(Zp$edge[1,])
is(rtree(3)$edge[1,])
is(rtree(3)$edge)
is(Zp$edge)
is(rtree(3)$edge.length)
is(rtree(3)$edge.length[1,1])
is(rtree(3)$edge.length[1])
is(Zp$edge.length[1])
(rtree(3)$edge.length[1])
(Zp$edge.length[1])
summary(Zp)
edgel
Zp$edge.length
plot(Zp)
N=90
for (i in 1:nrow(z)){
  if (all(z[i,1:2]<=N))  {
    
    edgess[cnt,] = as.integer(z[i,c(3,1)])
    edgel[cnt,] = l[i]
    edgess[cnt+1,] = as.integer(z[i,c(3,2)])
    edgel[cnt+1,] = l[i]
    cnt=cnt+2
    
  } else if (any(z[i,1:2]<=N))  {
    
    edgess[cnt,] =as.integer( z[i,c(3,1)])
    edgel[cnt,] = l[i]-l[z[,3]==z[i,1]]
    edgess[cnt+1,] = as.integer(z[i,c(3,2)])
    edgel[cnt+1,] = l[i]
    cnt=cnt+2
    
  }else
    { 
     edgess[cnt,] = as.integer(z[i,c(3,1)])
    edgel[cnt,] = l[i]-l[z[,3]==z[i,1]]
     edgess[cnt+1,] = as.integer(z[i,c(3,2)])
    edgel[cnt+1,] = l[i]-l[z[,3]==z[i,2]]
     cnt=cnt+2
    }
}
Z
z
z
edgel
134/2
Z
z
Z
cbind(z,l)
i=67
l[i]-l[z[,3]==z[i,1]]
l[i]-l[z[,3]==z[i,2]]
edgel
i=68
l[i]
l[i]-l[z[,3]==z[i,1]]
l68=l67
l[68]=l[67]
tip.label=as.character(1:N)
tip.label
plot(Zp)
plot(Zp,type='r')
link
link
Z=link
Zp$edge.length
Zp$edge
plot(Zp,type='r')
Z=link
Z
Zp$edge.length
Zp$edge.length
cbind(z,l)
Z
N=90
cbind(z,l)
cbind(z,l)
Z
Z
max(classes)
min(classes)
?hist
Z
Zp
ZP$edge.length
Zp$edge.length
any(Zp$edge.length<0)
plot(Zp)
plot(Zp,type='r')
rt
lambda.0
Zp
Zp
Zp$edge
cbind(Zp$edge,Zp$edge.length)
plot(rtree(50),type='r')
plot(rtree(50),type='f')
plot(Zp)
plot(Zp,tip.color=label)
label
label=c(rep(1,30),rep(2,30),rep(3,30))
plot(Zp,tip.color=label)
plot(Zp,root.edge=T,tip.color=label)
plot(Zp,type='f')
plot(Zp,root.edge=T,tip.color=label)
as.hclust(Zp)
zpclust = as.hclust(Zp)
plot(zpclust)
str(zpclust)
strhclust(zpclust)
?hclust
plot(zpclust)
plot(Zp,use.branch.lengths=F)
plot(Zp,use.edge.length=F)
plot(Zp,use.edge.length=F,type='f')
plot(Zp,use.edge.length=F,type='f')
Zp
Z
Zp
Z
cbind(Zp$edge,Zp$edge.length)
Z
inv(Zp)
plot(Zp)
plot(Zp,type='u')
plot(Zp,type='u')
Z=link
Z
N=10
edgess[c(length(edgess),2:(length(edgess)-1),]
edgess[c(length(edgess),2:(length(edgess)-1),]
edgess[c(length(edgess),2:(length(edgess)-1)),]
c(length(edgess),2:(length(edgess)-1))
edges
edgess
tip.label=as.character(1:N)
plot(Zp)
require(ape)
plot(Zp)
plot.phylo
 reorder(Zp, order = "pruningwise")
Z=link
library(ape)
?reorder
?reorder.phylo
reorder
reorder.phylo
 reorder(Zp, order = "c")
Z=link
 reorder(Zp, order = "c")
 zzp = reorder(Zp, order = "c")
plot(zzp)
plot(zzp,type='u')
plot(zzp,type='f')
saveRDS(Zp, file = "Zp.rds")
library(ape)
library(ade4)
saveRDS(Zp, file = "Zp.rds")
save(Zp, file = "Zp.rds")
save(Zp, file = "Zp.rds")
sp<-read(Zp, file = "Zp.rds")
sp<-load(Zp, file = "Zp.rds")
saveRDS(Zp, file = "Zp.rds")
writeRDS
saveRDS(Zp, file = "Zp.rds")
?saveRDS
require(base)
?saveRDS
saveRDS
serialize
serialize(Zp,"Zp.rds")
serialize(Zp,file(description = "Zp.rds"))
serialize(Zp,file(description = "Zp.rds",open='wt'))
serialize(Zp,file(description = "Zp.rds",open="wt"))
serialize(Zp,file(description = "Zp.rds",open="r+"))
close("Zp.rds")
kk<-file(description = "Zp.rds",open="r+")
serialize(Zp,kk)
close(kk)
output
output[1]
output[2]
(output[2])
plot(output[2])
plot(output[[2]])
plot(t(output[[2]]))
plot(output[2])
plot(output$K_record)
plot(t(output$K_record))
plot(1:200,output$K_record)
output$K_record
(output$K_record)
length(output$K_record)
length(t(output$K_record))
plot(1:200,t(output$K_record))
plot(1:200,t(output$K_record),'l')
plot(1:200,t(output$alpha_record),'l')
plot(1:200,t(output$k0_s),'l')
plot(1:200,t(output$k0_s),'l')
names(output)
plot(1:200,t(output$k_0s),'l')
mean(output$alpha_record)
plot(classes)
randperm
classes
classes
classes
classes
output$k <- 0s
output$k_0s
hist(output$k_0s)
hist(data.matrix(output$k_0s))
hist(data.matrix(output$k_0s),20)
mean((data.matrix(output$k_0s),20)
mean((data.matrix(output$k_0s)
)
)
mode(data.matrix(output$k_0s))
median(data.matrix(output$k_0s))
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
median(data.matrix(output$k_0s))
mean((data.matrix(output$k_0s)
)
)
plot(data.matrix(output$k_0s)
)
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
plot(data.matrix(output$k_0s),t='l')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
plot(data.matrix(output$K <- record),t='l')
plot(data.matrix(output$K_record),t='l')
(data.matrix(output$K_record))
hist(data.matrix(output$K_record))
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
(data.matrix(output$K_record))
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
plot(data.matrix(output$K_record),t='l')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
plot(data.matrix(output$K_record),t='l')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
plot(data.matrix(output$K_record),t='l')
plot(data.matrix(output$k_0s),t='l')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(baseline=F,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
pdf
?pdf
?hist
hist(classes[burnin:niter,1],bins,col='grey',xlab='number of sources',main='',ytick=NULL)
hist(classes[burnin:niter,1],bins,col='grey',xlab='number of sources',main='',freq=F)
?plot.phylo
"Athene_noctua:7.3):6.3,Tyto_alba:13.5);",
plot(reorder(Zp, order = "c"),tip.color=label,type='f')
plot(reorder(Zp, order = "c"),tip.color=label,type='f',root.node=T)
plot(reorder(Zp, order = "c"),tip.color=label,type='f',root.edge=T)
plot.phylo(reorder(Zp, order = "c"),tip.color=label,type='f',root.edge=T)
plot.phylo(reorder(Zp, order = "c"),tip.color=label,type='f',x.lim=c(0,1))
plot.phylo(reorder(Zp, order = "c"),tip.color=label,x.lim=c(0,1))
plot.phylo(reorder(Zp, order = "c"),tip.color=label,offset=0.7,x.lim=c(0,1))
Zp$edge
Zp$edge<-rbind(Zp$edge,c(L92,L91))
Zp$edge<-rbind(Zp$edge,c(integer(92),integer(91)))
c(integer(92),integer(91))
c(as.integer(92),as.integer(91))
Zp$edge<-rbind(Zp$edge,c(as.integer(92),as.integer(91)))
source("convert_Z_to_phylo.R")
Zp <- as.phylogg(Z,num.per.source*num.sources,rep('o',num.per.source*num.sources))
plot(reorder(Zp, order = "c"),tip.color=label)
N=90
plot(reorder(Zp, order = "c"),tip.color=label)
Zp <- list(edge=edgess, edge.length=edgel,tip.label=tip.label,Nnode=N)
Z=link
N=90
plot(Zp,tip.color=label)
return(Zp)
edgel
plot(Zp,tip.color=label)
plot(Zp,tip.color=label)
subtreeplot(Zp)
subtreeplot(Zp,T)
Z
Z[Z>N]
Z[Z>N]=Z+1
Z[Z>N]=Z[Z>N]+1
Z
plot(Zp,tip.color=label)
plot(Zp,tip.color=label)
Z=link
Zp
Zp
Zp.edge.length
Zp$edge.length
N=90
tip.label=as.character(1:N)
i
any(z[i,1:2]<=N)
Z
plot(Zp)
axisPhylo()
axisPhylo()
plot(Zp,type='f')
Z=link
Z=link
 link <- read.csv("linkages.csv",header=F)
Zp$edge.length
Zp$edge.length
length(Zp$edge.length-1))
length(Zp$edge.length-1)
?plot.phylo
Z=link
c(rep(1,length(Zp$edge.length-1)),0)
?plot.phylo
pholy
phylo
?phylo
Zp$node.label<-Zp$edge.length[1:5]
Zp
Zp$node.label<-as.character(Zp$edge.length[1:5])
points(0)
points(0)
text(1,1,'0')
text(0,0,'0')
text(0,0,0)
text(0,0,0.05)
text(0,0,0)
text(-Zp$edge.length[179],0,0)
plot(data.matrix(classes),t='l')
randi
rint
?rand
?randint
?randi
?randn
?rint
?rnorm
?distributions
int
?sample(2)
sample.int(30)
sample.int(2,30)
sample.int(30,2)
num.per.source
data
?pch

sep = 7 # separation of means
means = mvrnorm(as,rep(0,num.elements),diag(rep(sep,num.elements)))

data=matrix(NA,sum(num.per.source),num.elements)
label=rep(NA,sum(num.per.source))
a=0
for (i in 1:as){
    a=a+1
    data[a:(a+num.per.source[i]-1),] <-mvrnorm(num.per.source[i],means[i,],diag(rep(1,num.elements)))
    label[a:(a+num.per.source[i]-1)] <- i
    a=a+num.per.source[i]-1
}


scores = princomp(data)$scores

plot(scores[,1],scores[,2],t='n',xlab='PCA1',ylab='PCA2')

points(scores[1:sum(num.per.source[1:num.sources]),1],scores[1:sum(num.per.source[1:num.sources]),2],col=label[1:sum(num.per.source[1:num.sources])],pch=21,bg=label[1:sum(num.per.source[1:num.sources])])

points(scores[(sum(num.per.source[1:num.sources])+1):sum(num.per.source),1],scores[(sum(num.per.source[1:num.sources])+1):sum(num.per.source),2],col=label[(sum(num.per.source[1:num.sources])+1):sum(num.per.source)],pch=23,bg=label[(sum(num.per.source[1:num.sources])+1):sum(num.per.source)])


sep = 7 # separation of means
means = mvrnorm(as,rep(0,num.elements),diag(rep(sep,num.elements)))

data=matrix(NA,sum(num.per.source),num.elements)
label=rep(NA,sum(num.per.source))
a=0
for (i in 1:as){
    a=a+1
    data[a:(a+num.per.source[i]-1),] <-mvrnorm(num.per.source[i],means[i,],diag(rep(1,num.elements)))
    label[a:(a+num.per.source[i]-1)] <- i
    a=a+num.per.source[i]-1
}


scores = princomp(data)$scores

plot(scores[,1],scores[,2],t='n',xlab='PCA1',ylab='PCA2')

points(scores[1:sum(num.per.source[1:num.sources]),1],scores[1:sum(num.per.source[1:num.sources]),2],col=label[1:sum(num.per.source[1:num.sources])],pch=21,bg=label[1:sum(num.per.source[1:num.sources])])

points(scores[(sum(num.per.source[1:num.sources])+1):sum(num.per.source),1],scores[(sum(num.per.source[1:num.sources])+1):sum(num.per.source),2],col=label[(sum(num.per.source[1:num.sources])+1):sum(num.per.source)],pch=23,bg=label[(sum(num.per.source[1:num.sources])+1):sum(num.per.source)])

baseline[ixs,]
data[(sum(num.per.source[1:num.sources])+1):sum(num.per.source),]
data[(sum(num.per.source[1:num.sources])+1):sum(num.per.source),]
        }
output = DPM.call(datas=data.DPM,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
output = DPM.call(datas=data.DPM,iters=num.iters,thin=thin,np=np, path.to.julia='/home/philbert/julia')
classids_temp = copy(class_id)
?rdirch
?rdirch
?rdirich
?distributions
dbeta
?dbeta
library(MCMCpack)
install::library(MCMCpack)
install::packages(MCMCpack)
installpackages(MCMCpack)
installinstallpackages(MCMCpack)
installinstallinpackages(MCMCpack)
?install
?install.packages
install.packages(MCMCpack)
install.packages('MCMCpack')
install.packages('coda')
install.packages()
logD <- function(a) {
    sum(lgamma(a)) - lgamma(sum(a))
 }
ddirichlet<-function(x,alpha)
  ## probability density for the Dirichlet function, where x=vector of
  ## and (alpha-1)=vector of observed samples of each type
  ## ddirichlet(c(p,1-p),c(x1,x2)) == dbeta(p,x1,x2)
{
    s<-sum((alpha-1)*log(x))
    exp(sum(s)-logD(alpha))
}
rdirichlet<-function(n,a)
  ## pick n random deviates from the Dirichlet function with shape
{
    l<-length(a);
    x<-matrix(rgamma(l*n,a),ncol=l,byrow=TRUE);
    sm<-x%*%rep(1,l);
    x/as.vector(sm);
}

preys1
MVTNORM
mvtnorm
Sigma
Sigma=matrix(c(0.05,-0.05,0.05,-0.05,0.05,-0.05,0.05,-0.05,0.05),3,3)
predators
predators
2*3/5
2*(3/5)
predator.props[,1]
colMeans(preys1)
pred.coeff
colMeans(preys1)/pred.coeff[i,]
t(predator.props[i,]) %*%colMeans(preys1)/pred.coeff[i,]
(predator.props[i,]) %*%t(colMeans(preys1)/pred.coeff[i,])
(predator.props[i,]) %*%(colMeans(preys1)/pred.coeff[i,])
t(predator.props[i,]) %*%(colMeans(preys1)/pred.coeff[i,])
t(predator.props[i,]) %*%t(colMeans(preys1)/pred.coeff[i,])
(predator.props[i,]) %*%t(colMeans(preys1)/pred.coeff[i,])
 (predator.props[i,]) *t(preys)/pred.coeff[i,]
 (predator.props[i,]) %*%t(preys)/pred.coeff[i,]
 (predator.props[i,]) %*%t(preys/pred.coeff[i,])
 (predator.props) %*%t(preys)/pred.coeff
t(preys)
(preys)
predator
predator.props
predator.props*preys
predator.props%*%preys
preys
predator.props
predator.props[1,]%*%preys[,3]
mvtnorm
?mvtnorm
?mvrnorm
apply(prey,3,colMeans)
preys
dump
?dump
A
list(preds=predator.fats,preys=prey,mean_c=mean_c,n.preds=n.preds,n.fats=n.fats,n.preys=n.preys)
dump
?dump
install.packages()
install.packages()
install.packages('rjags')
install.packages)(
chooseCRANmirror()
install.packages('rjags')
version()
